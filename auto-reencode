#!/bin/bash

# https://trac.ffmpeg.org/wiki/Encode/H.264
#
# Run in the dir containing the target files you wish to convert to x264.
# There are no arguments.

export BLD="\e[01m" RED="\e[01;31m" BLU="\e[01;34m" CYA="\e[01;36m" NRM="\e[00m"
export PATH_TEMP='/tmp/auto-reencode'
export CPU_LIMIT=50
export BIT_VIDEO=6500
export BIT_AUDIO=128

command -v cpulimit >/dev/null 2>&1 || {
  echo -e "${BLD}${RED}cpulimit not installed. Aborting.${NRM}" >&2
  exit 1
}

command -v ffmpeg >/dev/null 2>&1 || {
  echo -e "${BLD}${RED}ffmpeg not installed. Aborting.${NRM}" >&2
  exit 1
}

command -v ffprobe >/dev/null 2>&1 || {
  echo -e "${BLD}${RED}ffprobe not installed. Aborting.${NRM}" >&2
  exit 1
}

report() {
  echo -e "${BLD}${CYA}Task $n of $total${NRM}"
  echo -e "${BLD} file to encode         : ${BLU}${file}${NRM}"
  echo -e "${BLD} current filesize       : ${fsize} MB${NRM}"
  echo -e "${BLD} video bitrate          : $vkbps kbps${NRM}"
  echo -e "${BLD} audio bitrate          : $akbps kbps${NRM}"
  echo -e "${BLD} play time              : $ptime secs${NRM}"
}

pass1() {
  cpulimit -i -z -l $((${CPU_LIMIT} * ${threads})) ffmpeg \
    -nostdin \
    -y \
    -v warning \
    -stats \
    -i "${file}" \
    -threads ${threads} \
    -c:v libx264 \
    -preset slow \
    -profile:v high \
    -level 5.1 \
    -b:v "${vkbps}"k \
    -pix_fmt yuv420p \
    -pass 1 \
    -passlogfile "${logfile}" \
    -an \
    -f mp4 /dev/null
}

pass2() {
  cpulimit -i -z -l $((${CPU_LIMIT} * ${threads})) ffmpeg \
    -nostdin \
    -y \
    -v warning \
    -stats \
    -i "${file}" \
    -threads ${threads} \
    -c:v libx264 \
    -preset slow \
    -profile:v high \
    -level 5.1 \
    -b:v "${vkbps}"k \
    -pix_fmt yuv420p \
    -pass 2 \
    -passlogfile "${logfile}" \
    -c:a aac \
    -b:a "${akbps}"k \
    -c:s mov_text \
    -movflags +faststart \
    -f mp4 "${PATH_TEMP}/${basename}.m4v" 

  mv "${PATH_TEMP}/${basename}.m4v" "${PWD}/".

  # remove the 1st pass log and mbtree files
  rm -f "$logfile"*
}

mapfile -t files < <(find "${PWD}/"* -name '*.avi' -o -name '*.mp4' -o -name '*.wmv' -o -name '*.mkv' -o -name '*.flv' -o -name '*.mov' -o -name '*.ogm')

total=${#files[@]}

for file in "${files[@]}"; do
  n=$((n + 1))

  # do not overwrite existing files
  if [[ -e "${file%.*}.m4v" ]]; then
    echo -e "${BLD}${RED} File already exists: ${file%.*}.m4v${NRM}"
    continue
  fi

  # paths
  filename=$(basename -- "$file")
  basename=${filename%.*}
  logfile="${PATH_TEMP}/ffmpeg2pass"

  # probe auto/video bitrate
  _vkbps=$(ffprobe -v error -select_streams v:0 -show_entries stream=bit_rate -of default=noprint_wrappers=1:nokey=1 "${file}")
  _akbps=$(ffprobe -v error -select_streams a:0 -show_entries stream=bit_rate -of default=noprint_wrappers=1:nokey=1 "${file}")

  # probe duration and filesize
  ptime=$(ffprobe -v error -show_entries format=duration -of default=noprint_wrappers=1:nokey=1 "${file}")
  fsize=$(du -m "${file}" | awk '{print $1}')

  # calculate audio/video bitrate
  if [[ "$_vkbps" =~ ^-?[0-9]+$ ]]; then
    vkbps=$(echo "${_vkbps} / 1000" | bc)
  else
    # base video bitrate of filesize when unable to probe bitrate
    vkbps=$(echo "(${fsize} * 8192) / (${ptime} + 0.5) / 1" | bc)
  fi

  if [[ "$_akbps" =~ ^-?[0-9]+$ ]]; then
    akbps=$(echo "${_akbps} / 1000" | bc)
  else
    akbps="${BIT_AUDIO}"
  fi

  report

  # bitrate limits
  if [[ ${vkbps} -gt ${BIT_VIDEO} ]]; then
    vkbps="${BIT_VIDEO}"
    echo -e "${BLD} use video bitrate: ${vkbps} kbps${NRM}"
  fi

  if [[ ${akbps} -gt ${BIT_AUDIO} ]]; then
    akbps="${BIT_AUDIO}"
    echo -e "${BLD} use audio bitrate: ${akbps} kbps${NRM}"
  fi

  # cpu threads
  threads=$(nproc --all)

  # create process path
  mkdir -p ${PATH_TEMP}

  # encode
  echo -e "${BLD} pass 1 of 2 stats:${NRM}"

  if pass1; then
    echo -e "${BLD} pass 2 of 2 stats:${NRM}"
    pass2
  else
    echo -e "${BLD}${RED} Pass 1 failed, exiting!${NRM}"
  fi
done
